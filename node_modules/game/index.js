/**
 * Module exports.
 * @public
 */ 

module.exports = Fractured
var Userlist = require('./user.js')
var Programs = require('./program.js')
var Files = require('./file.js')
var Mails = require('./mail.js')
function Fractured (request) {
  console.log("----------------")
  console.log("user: " + request.user)
  console.log("auth: " + request.auth)
  console.log("screen: " + request.screen)
  console.log("program: " + request.program)
  console.log("command: " + request.command)


  //creating the return object
  var answer = new Object();
  answer.change = {}
  answer.change.auth = false
  answer.change.user = false
  answer.change.screen = false
  answer.change.program = false
  answer.change.html = false
  answer.change.scare = false
  answer.change.reply = true
  answer.change.cls = false
  answer.change.sam = false
  answer.change.colour = false
  answer.change.password = false
  answer.change.speed = false
  answer.speed = 32
  answer.newsletter = ""
  answer.hardspook = 0
  answer.colour = ""
  answer.sam = ""
  answer.auth = ""
  answer.user = "" 
  answer.screen = []
  answer.program = ""
  answer.html = ""
  answer.scare = []
  answer.reply = ""
  answer.save = ""
  answer.spookcounter = 0
  //adminintervention is tesigned to top anything. 
  if (request.program == "adminintervention") {
      answer.screen = []
      answer.change.screen = false
      answer.change.reply = true
      answer.change.cls = true
      answer.reply = request.command + "\n"
      answer.screen.push(request.screen)
      return answer
  }

  //first we need to check if a user is logged in, and that they are not in the welcoming state. 
  if (request.user != "" &&  request.user != undefined && request.program != "password") {
    //user is logged in/trying to login. now we check if they exist. 
    //We also change reply to screen, for more control over the screen. 
    answer.change.screen = true
    answer.change.reply = false
    if (Userlist[request.user]) {
      //User has passed the first check. Now we need to check if they have the correct password
      if (request.password == Userlist[request.user].password) {
        //password is checke and user is "trusted". 

        
        //hack for the mediaplayer, as this one is annoying. 
        if (request.program == "play") {
          answer.reply = "Exiting Program. \n C:"  
          answer.change.reply = true
          answer.change.cls = true
          answer.change.html = true
          answer.change.screen = false
          answer.html = ""
          answer.change.program = true
          answer.program = ""
          return answer
        }
        //now the rest
        request.argument = ""
        checkregex = new RegExp(".+? ")
        if (request.command.match(checkregex)) {
          request.argument = request.command.replace(request.command.match(checkregex)[0], "")
          request.command = request.command.replace(request.argument, "")
          request.command = request.command.replace(" ", "")
        }
        if (Programs[request.command]) {
          if (Userlist[request.user].programs.indexOf(request.command) >= 0) {
            answer = Programs[request.command].execute(request, answer)  
          } else {
            //fallback if command was not found. 
            answer.change.screen = false
            answer.change.reply = true
            answer.reply = "Command not found. \n C:"  
            answer.change.cls = true
          }
        } else {
        //fallback if command was not found. 
            answer.change.screen = false
            answer.change.reply = true
            answer.reply = "Command not found. \n C:"  
            answer.change.cls = true
          }    
          //and if a user wants to logout
          if (request.command == "logout") {
            answer.change.cls = true
            answer.reply = "Logging you out.......\nLogin:"
            answer.change.program = true
            answer.program = "login"
            answer.change.user = true
            answer.user = ""
            answer.cls = true 
          }
          //we end with the "spooking", as we want to ensure that everyone is always able to be spooked, when trusted. 
          var userspooker
          userspooker = request.spooklevel
          if (request.spookcounter * userspooker >= 100) {
            console.log("User has been spooked#################")
            answer.hardspook = 1
            clues = ["Open up your fruitcage\n", "Malus pumila", "ninefour19onethreefour6", "A bed with a tough plastic mattress filled with water.", "Friends are the adventures of life", "Raising Hell", "Turn this Terminal off"]
            var d = Math.floor(Math.random() * Math.floor(answer.screen.length))
            var e = Math.floor(Math.random() * Math.floor(clues.length))
            answer.screen.splice(d, 1, clues[e] + "\n")
            console.log(answer.screen)
          } else {
            var d = Math.floor(Math.random() * 5)
            answer.spookcounter += request.spookcounter + d
          }
      } else {
        //Password was not correct. time to inform the user. 
        return passwordincorrect(request, answer)
      }
    } else {
      //User does not exist, time to inform the user. 
      return usernotfound(request, answer)
    }
  }
  //if no user has been found, we can savely assume that they are either doing something naughty, or are not yet logged in.
  //Time to provide them with a login prompt. 
  //And the login procedure.
  else {
    //Time to throw them the loginprompt.
    //We use a switch statement, to differenciate between the 4 possible states. Welcomepage, Username, Password, Hacker
    switch(request.program){
      case "helloworld":
        answer.reply = "...connection established\nServer has reobtained connection and is updating\n New information obtained - Update 3 of XX\nData inconsistent. Update could be corrupt\nLogin:"
        answer.change.program = true
        answer.program = "login"
      break;
      case "login": 
      //first things first, we check if the user exists. 
      if (Userlist[request.command]) {
        //if the user exists, we check if they are on spooklevel 4 or higher, to give them the green appeal. 
        if (Userlist[request.command].spooklevel >= 4) {
            answer.change.colour = true
            answer.colour = "#58d00f"
        } else {
            answer.change.colour = true
            answer.colour = "default"
        }
        //the color taking care of, we will now answer with screen, to clear the screen with our answer. 
        answer.change.screen = true
        answer.change.reply = false
        answer.change.user = true
        answer.change.program = true
        answer.program = "password"
        answer.user = request.command
        answer.screen = ["Login: " + request.command + "\n", "Password:"]
      } else {
        //if its not existing, we inform them and kick them out. 
        return usernotfound(request, answer)
      }
      break;
      case "password":
      //first checking if the user exists to avoid fuckery
      if (Userlist[request.user]) {
        //now we check if the password is correct
        if (Userlist[request.user].password == [request.command]) {
          //it is correct
          //special case for marie for the SAM synthesizer. 
          if (request.user == "marie") {
              answer.change.sam = true
              answer.sam = "Hello Marie - you have error number not found new messages. Have a productive day. Fractured Science"
          }
          answer.change.password = true
          answer.password = Userlist[request.user].password
          answer.change.screen = true
          answer.change.scare = true
          answer.scare = Userlist[request.user].spooklevel
          answer.change.reply = false
          answer.change.auth = true
          answer.auth = request.auth
          answer.screen = Userlist[request.user].welcomescreen
          answer.change.program = true
          answer.program = "commandline"
        } else {
          return passwordincorrect(request, answer)
        }
      } else {
        //User not found
        return usernotfound(request, answer)
      }
      break;
      case "":
      return usernotfound(request, answer)
      break;
    }
  }

  console.log("argument: "+ request.argument)
  console.log("----------------")
  return answer
}


function usernotfound(request, answer){
  answer.change.user = true
  answer.user = ""
  answer.change.cls = true
  answer.reply = "User not found, please try again \nLogin:"
  answer.change.program = true
  answer.program = "login"
  answer.cls = true 
  return answer
}

function passwordincorrect(request, answer){
  answer.change.cls = true
  answer.change.user = true
  answer.reply = "Password incorrect \nLogin:"
  answer.change.program = true
  answer.program = "login"
  answer.user = ""
  answer.cls = true 
  return answer
}

//Fractured.prototype.type =
//Fractured.prototype.types = function (types_) {}
