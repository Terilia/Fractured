/**
 * Module exports.
 * @public
 */
Programs = {} 
module.exports = Programs

function Program(name, description){
  	this.name = name
	this.description = description
	this.execute = function(caller){
  		answer.change.auth = false
  		answer.change.user = false
  		answer.change.screen = false
  		answer.change.program = false
  		answer.change.html = false
  		answer.change.scare = false
  		answer.change.reply = true
  		answer.change.cls = false
  		answer.auth = ""
  		answer.user = ""
  		answer.screen = []
  		answer.program = ""
  		answer.html = "" 
  		answer.scare = []
  		answer.reply = "The Test has been succesful."
  		return answer
	}
}

Programs.help = new Program("help", "Lists other available programs.")
Programs.help.execute = function(caller, answer){
	answer.change.auth = false
	answer.change.user = false
	answer.change.screen = false
	answer.change.program = false
	answer.change.html = false
	answer.change.scare = false
	answer.change.reply = true
	answer.change.cls = false
	answer.auth = ""
	answer.user = ""
	answer.screen = []
	answer.program = ""
	answer.html = ""
	answer.scare = []
	answer.reply = ""
	answer.screen.push("Listing available programs:\n")
	for (var i = Userlist[caller.user].programs.length - 1; i >= 0; i--) {
		answer.screen.push(Programs[Userlist[caller.user].programs[i]].name + "-----" + Programs[Userlist[caller.user].programs[i]].description +"\n")
	}
	answer.screen.push("logout" + "-----" + "Always logout at the end of shift!" +"\n")
	answer.screen.push("End of List.\n")
	answer.screen.push("C:")
	answer.change.reply = false
	answer.change.screen = true
	return answer
	}
Programs.dir = new Program("dir", "Lists all files")
Programs.dir.execute = function(caller, answer){
	answer.change.auth = false
	answer.change.user = false
	answer.change.screen = false
	answer.change.program = false
	answer.change.html = false
	answer.change.scare = false
	answer.change.reply = true
	answer.change.cls = false
	answer.auth = ""
	answer.user = ""
	answer.screen = []
	answer.program = ""
	answer.html = ""
	answer.scare = []
	answer.reply = ""
	answer.screen.push("Listing Files:\n")
	for (var i = Userlist[caller.user].files.length - 1; i >= 0; i--) {
		answer.screen.push(Files[Userlist[caller.user].files[i]].name + "------------------" + Files[Userlist[caller.user].files[i]].type +"\n")
	}
	answer.screen.push("End of List.\n")
	answer.screen.push("C:")
	answer.change.reply = false
	answer.change.screen = true
	return answer
	}

Programs.view = new Program("view", "Displays file content")
Programs.view.execute = function(caller, answer){
	answer.change.auth = false
	answer.change.user = false
	answer.change.screen = false
	answer.change.program = false
	answer.change.html = false
	answer.change.scare = false
	answer.change.reply = true
	answer.change.cls = false
	answer.auth = ""
	answer.user = ""
	answer.screen = []
	answer.program = ""
	answer.html = ""
	answer.scare = []
	answer.reply = ""
	var granted = false
	if (Userlist[caller.user].files.indexOf(caller.argument) >= 0) {
        granted = true
      }
	if (granted == true) {
		answer.screen.push(Files[caller.argument].content)
		answer.screen.push("-End of Content.\n")
		if (caller.argument == "hashfile") {
			string = "01110011 01101100 01100101 01100100 01100111 01100101 01101000 01100001 01101101 01101101 01100101 01110010 01010000 01110010 01101111 01110000 01100101 01110010 01110100 01111001 00100000 01101111 01100110 00100000 01000110 01110010 01100001 01100011 01110100 01110101 01110010 01100101 01100100 00100000 01010011 01100011 01101001 01100101 01101110 01100011 01100101" 
			answer.screen = []
			counter = 0
			prebufferstring = ""
			for (var i = 0; i < string.length; i++) {
				
				if (string[i] == "1") {
				  var chars = 'AEOIU'.split('');
				  prebufferstring += chars[Math.floor(Math.random() * chars.length)]
				}
				if (string[i] == "0") {
					var chars = 'BCDFGHJKLMNPQRSTVXZWY'.split('');
				  	prebufferstring += chars[Math.floor(Math.random() * chars.length)]
				}
				if (string[i] == " ") {
					prebufferstring += " "
				}
				counter += 1
    			if (counter >= 54) {
    			  counter = 0
    			  prebufferstring += "\n"
    			}
				
			}
			answer.screen.push(prebufferstring)
			answer.screen.push("\n")
		}
	} else {
		answer.screen.push("File not Found\n")
	}
	answer.screen.push("C:")
	answer.change.reply = false
	answer.change.screen = true
	return answer
	}

Programs.play = new Program("play", "Plays media files")
Programs.play.execute = function(caller, answer){
	answer.change.auth = false
	answer.change.user = false
	answer.change.screen = false
	answer.change.program = false
	answer.change.html = false
	answer.change.scare = true
	answer.change.reply = true
	answer.change.cls = false
	answer.auth = ""
	answer.user = ""
	answer.screen = []
	answer.program = ""
	answer.html = ""
	answer.scare = []
	answer.reply = ""
		console.log(caller.argument)
	var granted = false
	if (Userlist[caller.user].files.indexOf(caller.argument) >= 0) {
        granted = true
      }
	if (granted == true) {
		answer.change.program = true
		answer.change.html = true
		answer.change.screen = true
		answer.screen = ["Mediaplayer ----- File: "+Files[caller.argument].name+"\n", "Controls: Arrowkeys\n", "|<-| -5 sec\n", "|->| +5 sec\n", "|^| Volume Up\n", "|v| Volume Down\n","Type exit to leave this program\n", "\n", "Songtitle:"+Files[caller.argument].title+" \n", "Command:"]
		answer.html = "<div id='scrapper'></div>"
		answer.songlocation = "/mp3/" + caller.argument + ".mp3"
		answer.program = "play"
		if (caller.argument == "barbara") {
			answer.songlocation = "/mp3/" + caller.argument + ".wav"
		}

	} else {
		answer.screen.push("File not Found\n")
		answer.screen.push("C:")
	}
	answer.change.reply = false
	answer.change.screen = true
	return answer
	}


Programs.mail = new Program("mail", "Lists all mails")
Programs.mail.execute = function(caller, answer){
	answer.change.auth = false
	answer.change.user = false
	answer.change.screen = false
	answer.change.program = false
	answer.change.html = false
	answer.change.scare = false
	answer.change.reply = true
	answer.change.cls = false
	answer.auth = ""
	answer.user = ""
	answer.screen = []
	answer.program = ""
	answer.html = ""
	answer.scare = []
	answer.reply = ""

	if (caller.argument == "") {
			answer.screen.push("Listing all available mails:\n")
			for (var i = Userlist[caller.user].mails.length - 1; i >= 0; i--) {
				answer.screen.push("ID: " + Mails[Userlist[caller.user].mails[i]].id +" -Subject:" + Mails[Userlist[caller.user].mails[i]].subject +"\n")
			}
			answer.screen.push("To display a mail add the ID as an argument.\n", "Example: mail m0001\n")
			answer.screen.push("C:")
	} else {
		if (Userlist[caller.user].mails.indexOf(caller.argument) >= 0) {
        	answer.screen.push("From " + Mails[caller.argument].from + " ------ ")
        	answer.screen.push("to " + Mails[caller.argument].to + "\n")
        	answer.screen.push("Subject: " + Mails[caller.argument].subject + "\n")
        	answer.screen.push(Mails[caller.argument].body + "\n")
        	answer.screen.push("C:")
      	} else {
      		answer.screen.push("No ID could be found related to this user account\n")
      		answer.screen.push("C:")
      	}
	}

	answer.change.reply = false
	answer.change.screen = true
	return answer
	}

Programs.sam = new Program("sam", "Voice Synthesiser")
Programs.sam.execute = function(caller, answer){
	answer.change.auth = false
	answer.change.user = false
	answer.change.screen = true
	answer.change.program = false
	answer.change.html = false
	answer.change.scare = false
	answer.change.reply = true
	answer.change.cls = false
	answer.change.sam = true
	answer.sam = caller.argument
	answer.auth = ""
	answer.user = ""
	answer.screen = []
	answer.program = ""
	answer.html = ""
	answer.scare = []
	answer.reply = ""
	answer.screen.push("Sam Says:" + caller.argument+ "\n")
	answer.screen.push("C:")
	if (caller.user == "john") {
		switch(caller.argument){
			case "hello":
			answer.sam = "hello bzzz bzzzk john"
			answer.screen = []
			answer.screen.push("Sam Says:" + caller.argument+ "\n")
			answer.screen.push("C:")
			break;			
			case "help me":
			answer.sam = "they are lying"
			answer.screen = []
			answer.screen.push("Sam Says:" + caller.argument+ "\n")
			answer.screen.push("C:")
			break;
			case "password":
			answer.sam = "the password for marie is sledgehammer"
			answer.screen = []
			answer.screen.push("Sam Says:" + caller.argument+ "\n")
			answer.screen.push("C:")
			break;
			case "sam":
			answer.sam = "I am me. But I know that you fsfsfsfsfs are not john.fsfsfsfsfs"
			answer.screen = []
			answer.screen.push("Sam Says:" + caller.argument+ "\n")
			answer.screen.push("C:")
			break;
			case "john":
			answer.sam = "profile john. Age 24, sex: male, relationship: peter, work: pqqpqpqpq Fractured xzczc Science"
			answer.screen = []
			answer.screen.push("Sam Says:" + caller.argument+ "\n")
			answer.screen.push("C:")
			break;
			case "it looks at me":
			answer.sam = "then close your eyes"
			answer.screen = []
			answer.screen.push("Sam Says:" + caller.argument+ "\n")
			answer.screen.push("C:")
			break;
			case "i can hear it breath":
			answer.sam = "it cannot breath"
			answer.screen = []
			answer.screen.push("Sam Says:" + caller.argument+ "\n")
			answer.screen.push("C:")
			break;
			case "i am never alone":
			answer.sam = "we poisoned the water, now we poison your mind"
			answer.screen = []
			answer.screen.push("Sam Says:" + caller.argument+ "\n")
			answer.screen.push("C:")
			break;
			case "is somebody there?":
			answer.sam = "where?"
			answer.screen = []
			answer.screen.push("Sam Says:" + caller.argument+ "\n")
			answer.screen.push("C:")
			break;
			case "they taste bad":
			answer.sam = "medicine is always tasting bad"
			answer.screen = []
			answer.screen.push("Sam Says:" + caller.argument+ "\n")
			answer.screen.push("C:")
			break;
			case "i cannot sleep":
			answer.sam = "you will soon enough"
			answer.screen = []
			answer.screen.push("Sam Says:" + caller.argument+ "\n")
			answer.screen.push("C:")
			break;
			case "i miss home":
			answer.sam = "Fractured Science is your new"
			answer.screen = []
			answer.screen.push("Sam Says:" + caller.argument+ "\n")
			answer.screen.push("C:")
			break;
		}
	}
	if (caller.argument == "") {
		answer.sam = "Hello I am Sam!"
	}
	var d = Math.random();
  	if (d > 0.9){
  	  answer.sam = "I will only answer bzzzz John krkbhgn" 
  	}
	answer.change.reply = false
	answer.change.screen = true
	return answer
	}

Programs.feedback = new Program("feedback", "Feedback is sent to HQ.")
Programs.feedback.execute = function(caller, answer){
	answer.change.auth = false
	answer.change.user = false
	answer.change.screen = false
	answer.change.program = false
	answer.change.html = false
	answer.change.scare = false
	answer.change.reply = true
	answer.change.cls = false
	answer.auth = ""
	answer.user = ""
	answer.screen = []
	answer.program = ""
	answer.html = ""
	answer.scare = []
	answer.reply = ""
	if (caller.argument == "") {
			answer.screen.push("We have currently received #error# feedback cases.\n")
			answer.screen.push("C:")
	} else {
			answer.screen.push("Your feedback has been submitted and will be answered.\n")
			answer.screen.push("C:")
			answer.save = caller.argument
	}
	answer.change.reply = false
	answer.change.screen = true
	return answer
}

Programs.newsletter = new Program("newsletter", "Register for our newsletter!")
Programs.newsletter.execute = function(caller, answer){
	answer.change.auth = false
	answer.change.user = false
	answer.change.screen = false
	answer.change.program = false
	answer.change.html = false
	answer.change.scare = false
	answer.change.reply = true
	answer.change.cls = false
	answer.auth = ""
	answer.user = ""
	answer.screen = []
	answer.program = ""
	answer.html = ""
	answer.scare = []
	answer.reply = ""
	if (caller.argument == "") {
			answer.screen.push("Register for our Newsletter for free!\n")
			answer.screen.push("Everything you have to do is use the following syntax:\n")
			answer.screen.push("newsletter FirstName address\n")
			answer.screen.push("Please note that in the case of a class 5\n")
			answer.screen.push("Newsletter delivery may be delayed or suspended\n")
			answer.screen.push("Please note that if you register for our newsletter,\n")
			answer.screen.push("you give us (Fractured Science) explicit permission to \n")
			answer.screen.push("to use and store your data permanently.\n")
			answer.screen.push("Please use the feedback programm to revoke those rights.\n")
			answer.screen.push("C:")
	} else {
			answer.screen.push("Your are now registered for our newsletter\n")
			answer.screen.push("Please note that abusing this server\n")
			answer.screen.push("Will result in your terminal being permanently\n")
			answer.screen.push("removed from our services. Thank you\n")
			answer.screen.push("C:")
			answer.newsletter = caller.argument
	}
	answer.change.reply = false
	answer.change.screen = true
	return answer
}

Programs.sniffer = new Program("sniffer", "Sniff network data with this tool.")
Programs.sniffer.execute = function(caller, answer){
	answer.change.auth = false
	answer.change.user = false
	answer.change.screen = true
	answer.change.program = false
	answer.change.html = false
	answer.change.scare = false
	answer.change.reply = false
	answer.change.cls = false
	answer.auth = ""
	answer.user = ""
	answer.screen = []
	answer.program = ""
	answer.html = ""
	answer.scare = []
	answer.reply = ""
	if (caller.argument == "loyd blankenship") {
		answer.screen.push("Starting to sniff:\n")
		sniffwords = ["filesize", "byte", "sleep", "ABS", "AND", "ASC", "ATN", "CHR", "CLOSE", "CLR", "CMD", "CONT", "COS", "DATA", "DEF", "DIM", "END", "EXP", "FN", "FOR", "FRE", "GET", "GOSUB", "GOTO", "IF", "INPUT", "INT", "LEFT", "LEN", "LET", "LIST", "LOAD", "LOG", "MID", "NEW", "NEXT", "NOT", "ON", "OPEN", "OR", "PEEK", "POKE", "POS", "PRINT", "READ", "REM", "RESTORE", "RETURN", "RIGHT", "RND", "RUN", "SAVE", "SGN", "SIN", "SPC", "SQR", "STATUS", "STEP", "STOP", "STR", "SYS", "TAB", "TAN", "THEN", "TIME", "TO", "USR", "VAL", "VERIFY", "WAIT", "agentc", "hey", "network", "suicide bombing", "chile", "sri lanka", "good", "effect", "good effect", "london failure", "paris", "useful idiots", "ukraine", "damascus", "hezbollah", "berlin", "bombing", "la belle", "Hauptstrasse 78", "human testing", "Harris Isbell", "Harris", "Isbell", "Chernobyl", "April 1986", "graphite", "soviets", "No. 4", "Cancel project Chanel", "Semtex", "Aleksandr Fyodorovich Akimov", "Good report", "Full effect on John", "John", "Scientist dosis", "Sam Voice", "promotion", "money", "what the actual fuck", "moron", "idiot", "You drive me nuts sometimes", "stop", "No", "yes", "shitty terminals", "loud fan", "fesable", "mkultra", "I cannot believe", "don't do this", "yes sir", "military", "Anatoly Stepanovich Dyatlov", "cute cats", "macarthur", "war hero", "greater good", "usa", "we got this", "false flag attack", "agression", "destruction", "death", "killings", "money", "cash", "dollar", "waterbed", "warhero", "we do the right things", "false flag", "russia", "strength"]
		var chars = '0123456789ABCDEF'.split('');
  		var prebuffer = ""
  		counter = 0
  		for (var i = 512- 1; i >= 0; i--) {
  		  prebuffer += chars[Math.floor(Math.random() * 16)]
  		  counter += 1
  		  if (counter % 32 === 0) {
  		    chance = Math.random();
  		    if (chance > 0.65) {
  		    	hexword = []
  		    	var d = Math.floor(Math.random() * Math.floor(sniffwords.length))
  		    	for (var y = 0; y < sniffwords[d].length; y++) {
  		    		i -= 1
					var hex = Number(sniffwords[d].charCodeAt(y)).toString(16);
					hexword.push(hex)
  		    	}
  		    	prebuffer += hexword.join('')
  		    }
  		  }
  		}
  		prebuffer =  prebuffer.toString().match(/.{4}/g).join(' ');
  		prebuffer =  prebuffer.toString().match(/.{55}/g).join('\n');
  		answer.screen.push(prebuffer)
  		answer.screen.push("\nC:")
	} else {
			answer.screen.push("You need to provide the correct password to use this tool.\n")
			answer.screen.push("C:")
	}
	answer.change.reply = false
	answer.change.screen = true
	return answer
}

Programs.setenv = new Program("setenv", "Adjust system environment variables. DANGEROUS!")
Programs.setenv.execute = function(caller, answer){
	answer.change.auth = false
	answer.change.user = false
	answer.change.screen = true
	answer.change.program = false
	answer.change.html = false
	answer.change.scare = false
	answer.change.reply = false
	answer.change.cls = false
	answer.auth = ""
	answer.user = ""
	answer.screen = []
	answer.program = ""
	answer.html = ""
	answer.scare = []
	answer.reply = ""
	answer.change.reply = false
	answer.change.screen = true
	if (caller.argument.indexOf("color") >= 0) {
			answer.change.colour = true
			var colorchoice = caller.argument.replace(/color/g, "")
			if (colorchoice != "") {
				answer.colour = colorchoice
				answer.screen.push("Variable 'color' has been adjusted\n")
				answer.screen.push("C:")
			} else {
				answer.screen.push("Allows for further adjustment of the terminal cursor color\nC:")
			}
			return answer

	}
	if (caller.argument.indexOf("speed") >= 0) {
			var colorchoice = caller.argument.replace(/speed/g, "")
			if (colorchoice != "") {
				if (colorchoice == " on") {
					answer.change.speed = true
					answer.speed = 14
					answer.screen.push("AEC as co-processor enabled.\nC:")
				} else {
					answer.change.speed = true
					answer.speed = 32
					answer.screen.push("AEC as co-processor disabled.\nC:")
				}
			} else {
				answer.screen.push("Allows the AEC chip to be used as a co-processor.\nWARNING - this can cause memory corruption\n Available: on/off\n Default: off\nC:")
			}
			return answer

	}
	if (caller.argument.indexOf("defragment") >= 0) {
			var colorchoice = caller.argument.replace(/defragment/g, "")
			console.log(colorchoice)
			if (colorchoice != "") {
				if (colorchoice == " on" && caller.speed >= 32) {
					answer.screen.push("Defragmenting.\n")
					defragcounter = 0
					answer.screen.push("[ ")
					while (defragcounter < 10) {
						answer.screen.push(" ")
						chance = Math.random();
						if (chance >= 0.9) {
							defragcounter = defragcounter + 1
							answer.screen.push("x")
						}
					}
					answer.screen.push(" ] Done\nC:")
					answer.change.scare = true
					answer.scare = 1
				} else {
					answer.screen.push("CRASH - Note, the AEC cannot be used as\n co-processor while using defragment.\nC:")
				}
			} else {
				answer.screen.push("Defragenting memory to reduce glitches \nand corruption.\nWARNING - this can take a long time\n To start start setenv with the command\n defragment on\nC:")
			}
			return answer

	}
	if (caller.argument == "") {
			answer.screen.push("This tool allows the user to adjust their environment\nvariables per hand. Note that Fractured is not liable\nfor any damages using this.")
			answer.screen.push("\nThis tool is considered extremely dangerous and should\nonly be used by professionals\n")
			answer.screen.push("C:")
	} else {
		answer.screen.push("Variable not found. Exiting environment\nC:")
	}

	return answer
}


Programs.decrypter = new Program("decrypter", "Use this in combination with the AEC to decrypt")
Programs.decrypter.execute = function(caller, answer){
	answer.change.auth = false
	answer.change.user = false
	answer.change.screen = true
	answer.change.program = false
	answer.change.html = false
	answer.change.scare = false
	answer.change.reply = false
	answer.change.cls = false
	answer.auth = ""
	answer.user = ""
	answer.screen = []
	answer.program = ""
	answer.html = ""
	answer.scare = []
	answer.reply = ""
	answer.change.reply = false
	answer.change.screen = true
	if (caller.argument.indexOf("handshake") >= 0) {
			var colorchoice = caller.argument.replace(/handshake/g, "")
			var colorchoice = colorchoice.replace(/ /g, "")
			if (colorchoice != "") {
				if (colorchoice.match(/[a-f, A-F, 0-9]/g) != undefined) {
					if (colorchoice.match(/[a-f, A-F, 0-9]/g).length == 5 && colorchoice.match(/[g-z]/g) == undefined) {
					decryptarray = colorchoice.split("")
					console.log(caller.auth)
					buffer = caller.auth.toString()
					buffer = buffer.toLowerCase()
					solutionarray = buffer.match(/[a-f, 0-9]/g)
					if (solutionarray.length > 5) {
						solutionarray = solutionarray.slice(0,5)
					} 
					if (solutionarray.length <= 4) {
						while(solutionarray.length < 5) {
						var chars = '0123456789ABCDEF'.split('');
						solutionarray.push(chars[Math.floor(Math.random() * 16)]) 
						}
					}
					var record = []
					var correct = 0
					for (var i = 0; i < decryptarray.length; i++) {
						check = parseInt(decryptarray[i], 16) - parseInt(solutionarray[i], 16)
						if (check > 0) {
							record.push("\>")
						}
						if (check < 0) {
							record.push("\<")
						}
						if (check == 0) {
							record.push("o")
							correct += 1
						}
					}
					console.log(solutionarray)
					console.log(decryptarray)
					if (correct == 5) {
						answer.screen.push("Cracked: The password is - macarthur\nC:")
					} else {
							string0 = "00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000"
							string1 = "01000000 00000100 00000010 01000000 10000000 00000100 00001000 01000000 00000100 01000000 00000100 00000010 01000000 10000000 00000100 00001000 01000000 00000100 01000000 00000100 00000010 01000000 10000000 00000100 00001000 01000000 00000100 01000000 00000100 00000010 01000000 10000000 00000100 00001000 01000000 00001000 01000000 00000100 00000010 01000000 10000000 00000100 00001000 01000000 00000100"
							string2 = "01001000 00010100 00100010 01000100 10010000 01000100 00001100 01000010 01000100 01001000 00010100 00100010 01000100 10010000 01000100 00001100 01000010 01000100 01001000 00010100 00100010 01000100 10010000 01000100 00001100 01000010 01000100 01001000 00010100 00100010 01000100 10010000 01000100 00001100 01000010 01000100 01001000 00010100 00100010 01000100 10010000 01000100 00001100 01000010 01000100"
							string3 = "01011000 00110100 00101010 01001100 10010100 01000110 10001100 01100010 01001100 01011000 00110100 00101010 01001100 10010100 01000110 10001100 01100010 01001100 01011000 00110100 00101010 01001100 10010100 01000110 10001100 01100010 01001100 01011000 00110100 00101010 01001100 10010100 01000110 10001100 01100010 01001100 01011000 00110100 00101010 01001100 10010100 01000110 10001100 01100010 01001100"
							string4 = "01011010 10110100 00101110 01001101 10010101 01100110 10101100 01101010 01101100 01011010 10110100 00101110 01001101 10010101 01100110 10101100 01101010 01101100 01011010 10110100 00101110 01001101 10010101 01100110 10101100 01101010 01101100 01011010 10110100 00101110 01001101 10010101 01100110 10101100 01101010 01101100 01011010 10110100 00101110 01001101 10010101 01100110 10101100 01101010 01101100"
							string5 = "01111010 10110101 00111110 01011101 10110101 01100111 10111100 01111010 01101101 01111010 10110101 00111110 01011101 10110101 01100111 10111100 01111010 01101101 01111010 10110101 00111110 01011101 10110101 01100111 10111100 01111010 01101101 01111010 10110101 00111110 01011101 10110101 01100111 10111100 01111010 01101101 01111010 10110101 00111110 01011101 10110101 01100111 10111100 01111010 01101101"
							switch(correct){
								case 0:
								string = string0
								break;
								case 1:
								string = string1
								break;
								case 2:
								string = string2
								break;
								case 3:
								string = string3
								break;
								case 4:
								string = string4
								break;
								case 5:
								string = string5
								break;
							}
							answer.screen = []
							counter = 0
							prebufferstring = ""
							for (var i = 0; i < string.length; i++) {
								
								if (string[i] == "1") {
								  var chars = 'AEOIU'.split('');
								  prebufferstring += chars[Math.floor(Math.random() * chars.length)]
								}
								if (string[i] == "0") {
									var chars = 'BCDFGHJKLMNPQRSTVXZWY'.split('');
								  	prebufferstring += chars[Math.floor(Math.random() * chars.length)]
								}
								if (string[i] == " ") {
									prebufferstring += " "
								}
								counter += 1
    							if (counter >= 54) {
    							  counter = 0
    							  prebufferstring += "\n"
    							}
								
							}
							answer.screen.push(prebufferstring)
							answer.screen.push("\nC:")
							return answer
					}
					return answer
					}
				}
								answer.screen.push("You need to provide 5 byte of offset for\n")
				answer.screen.push("decrypter to work. Example:\n")
				answer.screen.push("decrypter testfile a9f11\nc:")
				return answer
			}
				answer.screen.push("You need to provide 5 hex byte of offset for\n")
				answer.screen.push("decrypter to work. Example:\n")
				answer.screen.push("decrypter testfile a9f11\nc:")
				return answer
	} else {
		answer.screen.push("File not found\nC:")
	}
	return answer
}

//Fractured.prototype.type =
//Fractured.prototype.types = function (types_) {}