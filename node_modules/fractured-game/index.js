/**
 * Module exports.
 * @public
 */ 

module.exports = Fractured
var Userlist = require('./user.js')
var Programs = require('./program.js')
var Files = require('./file.js')
var Mails = require('./mail.js')
function Fractured (request) {
  console.log("----------------")
  console.log("user: " + request.user)
  console.log("auth: " + request.auth)
  console.log("screen: " + request.screen)
  console.log("program: " + request.program)
  console.log("command: " + request.command)


  //creating the return object
  var answer = new Object();
  answer.change = {}
  answer.change.auth = false
  answer.change.user = false
  answer.change.screen = false
  answer.change.program = false
  answer.change.html = false
  answer.change.scare = false
  answer.change.reply = true
  answer.change.cls = false
  answer.change.sam = false
  answer.change.password = false
  answer.newsletter = ""
  answer.hardspook = 0
  answer.sam = ""
  answer.auth = ""
  answer.user = "" 
  answer.screen = []
  answer.program = ""
  answer.html = ""
  answer.scare = []
  answer.reply = ""
  answer.save = ""
  answer.spookcounter = 0
  if (request.program == "adminintervention") {
      answer.screen = []
      answer.change.screen = false
      answer.change.reply = true
      answer.change.cls = true
      answer.reply = request.command + "\n"
      answer.screen.push(request.screen)
      return answer
      }
  if (request.program == "helloworld" || request.program == "login" || request.program == "password") {
    switch(request.program){
      case "helloworld":
        answer.reply = "...connection established\nServer has reobtained connection and is updating\n New information obtained - Update 2 of XX\nLogin:"
        answer.change.program = true
        answer.program = "login"
        answer.cls = true 
      break;
      case "login":
      if (Userlist[request.command]) {
        answer.change.screen = true
        answer.change.reply = false
        answer.change.user = true
        answer.change.program = true
        answer.program = "password"
        answer.user = request.command
        answer.screen = ["Login: " + request.command + "\n", "Password:"]
      } else {
        answer.change.cls = true
        answer.reply = "User not found, please try again \nLogin:"
        answer.change.program = true
        answer.program = "login"
        answer.cls = true 
      }
      break;
      case "password":
      if (Userlist[request.user].password == [request.command]) {
        if (request.user == "marie") {
              answer.change.sam = true
              answer.sam = "Hello Marie - you have error number not found new messages. Have a productive day. Fractured Science"
        }
        answer.change.password = true
        answer.password = Userlist[request.user].password
        answer.change.screen = true
        answer.change.scare = true
        answer.scare = Userlist[request.user].spooklevel
        answer.change.reply = false
        answer.change.auth = true
        answer.auth = request.auth
        var time = new Date(Date.now())
        answer.screen = Userlist[request.user].welcomescreen
        console.log(answer.screen)
        answer.change.program = true
        answer.program = "commandline"
      } else {
        answer.change.cls = true
        answer.change.user = true
        answer.reply = "Password incorrect \nLogin:"
        answer.change.program = true
        answer.program = "login"
        answer.user = ""
        answer.cls = true 
        return answer
      }
      break;
    }
  }
  if (request.user != "") {
        if (request.program == "play") {
        answer.reply = "Exiting Program. \n C:"  
        answer.change.cls = true
        answer.change.html = true
        answer.change.screen = false
        answer.html = ""
        answer.change.program = true
        answer.program = ""
        return answer
      }
      if (request.program != "password" && Userlist[request.user].password != [request.password]) {
        answer.reply = "hack detected. Terminating connection. \n Login:"
        answer.change.cls = true
        answer.change.program = true
        answer.program = "login"
        answer.change.user = true
        answer.user = ""
        answer.cls = true 
        return JSON.stringify(answer)
      }
      request.argument = ""
      checkregex = new RegExp(".+? ")
      if (request.command.match(checkregex)) {
        request.argument = request.command.replace(request.command.match(checkregex)[0], "")
        request.command = request.command.replace(request.argument, "")
        request.command = request.command.replace(" ", "")
      }
      if (Programs[request.command]) {
        if (Userlist[request.user].programs.indexOf(request.command) >= 0) {
          answer = Programs[request.command].execute(request, answer)  
        }
      }    
    //logout
    if (request.command == "logout") {
      answer.change.cls = true
      answer.reply = "Logging you out.......\nLogin:"
      answer.change.program = true
      answer.program = "login"
      answer.change.user = true
      answer.user = ""
      answer.cls = true 
    }
    if (answer.reply == "") {  
        answer.reply = "Command not found. \n C:"  
        answer.change.cls = true
    }

  }


  //spooking
  var userspooker
  if (request.user != "") {  userspooker = Userlist[request.user].spooklevel}
  if (request.spookcounter * userspooker >= 100) {
    console.log("User has been spooked#################")
    answer.hardspook = 1
    clues = ["Open up your fruitcage\n", "Malus pumila", "ninefour19onethreefour6", "A bed with a tough plastic mattress filled with water.", "Friends are the adventures of life", "Raising Hell", "Turn this Terminal off"]
    var d = Math.floor(Math.random() * Math.floor(answer.screen.length))
    var e = Math.floor(Math.random() * Math.floor(clues.length))
    answer.screen.splice(d, 1, clues[e] + "\n")
    console.log(answer.screen)
  } else {
    var d = Math.floor(Math.random() * Math.floor(5))
    answer.spookcounter += request.spookcounter + d
  }
  console.log("argument: "+ request.argument)
  console.log("----------------")
  return answer
}

//Fractured.prototype.type =
//Fractured.prototype.types = function (types_) {}